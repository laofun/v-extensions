{"uuid":"58362e19f927dfa0a0cc86c547c999a4","name":"Wiki Dịch","version":1.4,"url":"","language":"vi","icon":"\u003d\u003d","source":"http://wikidich.com","regex":"wikidich.com/truyen/[^/]+/?$","author":"Darkrai","describe":"","group":"convert","supportUpdate":false,"chap":"local url \u003d ...\r\nlocal doc \u003d http:request(url):html()\r\nif doc ~\u003d nil then\r\n    return doc:select(\"div#bookContentBody\")\r\nend\r\nreturn nil","toc":"local url \u003d ...\r\n\r\nlocal list \u003d {}\r\nlocal doc \u003d http:request(url):html()\r\n\r\nif (doc ~\u003d nil) then\r\n    local id \u003d doc:select(\"input#bookId\"):attr(\"value\")\r\n    local size \u003d num:to_int(regexp:find(doc:html(), \"loadBookIndex.*?\\\\d+\\\\s*,\\\\s*(\\\\d+)\\\\s*,\"), 501)\r\n    local signKey \u003d regexp:find(doc:html(), \"signKey\\\\s*\u003d\\\\s*\\\"(.*?)\\\";\")\r\n    local fuzzySignJs \u003d regexp:find(doc:html(), \"(?s)function\\\\s*fuzzySign.*?return\\\\s*(.*?);\")\r\n    local js \u003d \"function signFunc(text){var o\u003d\" .. fuzzySignJs .. \";function f(r,o){return r\u003e\u003e\u003eo|r\u003c\u003c32-o}for(var t,n,a\u003dMath.pow,i\u003da(2,32),c\u003d\\\"length\\\",e\u003d\\\"\\\",u\u003d[],s\u003d8*o[c],v\u003d[],g\u003d[],h\u003dg[c],l\u003d{},b\u003d2;64\u003eh;b++)if(!l[b]){for(t\u003d0;313\u003et;t+\u003db)l[t]\u003db;v[h]\u003da(b,.5)*i|0,g[h++]\u003da(b,1/3)*i|0}for(o+\u003d\\\"\\\";o[c]%64-56;)o+\u003d\\\"\\0\\\";for(t\u003d0;t\u003co[c];t++){if((n\u003do.charCodeAt(t))\u003e\u003e8)return;u[t\u003e\u003e2]|\u003dn\u003c\u003c(3-t)%4*8}for(u[u[c]]\u003ds/i|0,u[u[c]]\u003ds,n\u003d0;n\u003cu[c];){var d\u003du.slice(n,n+\u003d16),p\u003dv;for(v\u003dv.slice(0,8),t\u003d0;64\u003et;t++){var w\u003dd[t-15],A\u003dd[t-2],C\u003dv[0],M\u003dv[4],S\u003dv[7]+(f(M,6)^f(M,11)^f(M,25))+(M\u0026v[5]^~M\u0026v[6])+g[t]+(d[t]\u003d16\u003et?d[t]:d[t-16]+(f(w,7)^f(w,18)^w\u003e\u003e\u003e3)+d[t-7]+(f(A,17)^f(A,19)^A\u003e\u003e\u003e10)|0);(v\u003d[S+((f(C,2)^f(C,13)^f(C,22))+(C\u0026v[1]^C\u0026v[2]^v[1]\u0026v[2]))|0].concat(v))[4]\u003dv[4]+S|0}for(t\u003d0;8\u003et;t++)v[t]\u003dv[t]+p[t]|0}for(t\u003d0;8\u003et;t++)for(n\u003d3;n+1;n--){var j\u003dv[t]\u003e\u003e8*n\u0026255;e+\u003d(16\u003ej?0:\\\"\\\")+j.toString(16)}return e}\"\r\n    local sign \u003d javascript:execute(js, \"signFunc\", signKey .. 0 .. size)\r\n\r\n    local firstUrl \u003d \"https://wikidich.com/book/index?bookId\u003d\" .. id .. \"\u0026start\u003d\" .. 0 .. \"\u0026size\u003d\" .. size .. \"\u0026signKey\u003d\" .. signKey .. \"\u0026sign\u003d\" .. sign\r\n    doc \u003d http:request(firstUrl):html()\r\n    local currentPage \u003d 0\r\n    while (doc ~\u003d nil) do\r\n        local el \u003d doc:select(\"li.chapter-name a\")\r\n        for i \u003d 0, el:size() - 1 do\r\n            local e \u003d el:get(i)\r\n            local link \u003d e:attr(\"href\")\r\n            if (string.len(link) \u003c 10) then\r\n                link \u003d e:attr(\"data-href\")\r\n            end\r\n            table.insert(list, core:new_chapter(e:text(), link, \"http://wikidich.com\"))\r\n        end\r\n\r\n        local lastPage \u003d num:to_int(doc:select(\"ul.pagination a\"):last():attr(\"data-start\"), 0)\r\n        doc \u003d nil\r\n        if (currentPage \u003c lastPage) then\r\n            currentPage \u003d currentPage + size\r\n            sign \u003d javascript:execute(js, \"signFunc\", signKey .. currentPage .. size)\r\n            firstUrl \u003d \"https://wikidich.com/book/index?bookId\u003d\" .. id .. \"\u0026start\u003d\" .. currentPage .. \"\u0026size\u003d\" .. size .. \"\u0026signKey\u003d\" .. signKey .. \"\u0026sign\u003d\" .. sign\r\n            doc \u003d http:request(firstUrl):html()\r\n        end\r\n    end\r\nend\r\nreturn list","search":"local key, page \u003d ...\r\nlocal doc \u003d http:request(\"http://wikidich.com/tim-kiem?qs\u003d1\u0026q\u003d\" .. key .. \"\u0026start\u003d\" .. (page + 1) * 10 .. \"\u0026so\u003d1\u0026vo\u003d1\"):html()\r\n\r\nlocal list \u003d {}\r\nif doc ~\u003d nil then\r\n\r\n    list[\"count\"] \u003d num:to_int(doc:select(\"li.waves-effect\"):last():text(), 0)\r\n\r\n    local el \u003d doc:select(\"div.book-list div.book-item\")\r\n\r\n    if el ~\u003d nil then\r\n        local data \u003d {}\r\n        for i \u003d 0, el:size() - 1 do\r\n            local e \u003d el:get(i)\r\n            table.insert(data, core:new_search(\r\n                    e:select(\"h5\"):text(),\r\n                    e:select(\"div.info-col a\"):first():attr(\"href\"),\r\n                    e:select(\"img\"):attr(\"src\"),\r\n                    \"http://wikidich.com\")\r\n            )\r\n        end\r\n        list[\"data\"] \u003d data\r\n    end\r\nend\r\nreturn list\r\n","detail":"local url \u003d ...\r\n\r\nlocal doc \u003d http:request(url):html()\r\n\r\nif doc ~\u003d nil then\r\n    local book \u003d {}\r\n    book[\"name\"] \u003d doc:select(\"div.cover-info h2\"):text()\r\n    book[\"cover\"] \u003d core:merge_url(\"https://wikidich.com\", doc:select(\"div.book-info img\"):first():attr(\"src\"))\r\n    book[\"author\"] \u003d text:replace(regexp:find(doc:select(\"div.cover-info\"):html(), \"tac-gia/.*?\u003e(.*?)\u003c/a\u003e\", 1), \"^\\\\s*|\u003ca.*?\u003e|\u003c/a\u003e|\\\\s*$\", \"\")\r\n    book[\"description\"] \u003d doc:select(\"div.book-desc-detail\"):html()\r\n    local element \u003d doc:select(\"div.cover-info\"):first()\r\n    html:remove(element, { \"h2\", \"span\", \"i\" })\r\n    book[\"detail\"] \u003d element:html()\r\n    return book\r\nend\r\nreturn nil","checked":true}