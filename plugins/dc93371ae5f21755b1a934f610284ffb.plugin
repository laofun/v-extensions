{"uuid":"dc93371ae5f21755b1a934f610284ffb","name":"Wattpad","version":1.0,"url":"","language":"vi","icon":"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\u003d\u003d","source":"http://www.wattpad.com","regex":"(www.)?wattpad.com/story/\\d+.*?/?$","author":"Darkrai","describe":"","group":"other","supportUpdate":false,"chap":"local id \u003d ...\r\nlocal param \u003d { [\"id\"] \u003d id }\r\nlocal txt \u003d core:decode_gzip(http:request(\"http://www.wattpad.com/api/text\"):params(param):raw())\r\nif txt ~\u003d nil then\r\n    return text:replace(txt, \"\\n\", \"\u003cbr\u003e\")\r\nend\r\nreturn nil","toc":"local url \u003d ...\r\n\r\nlocal list \u003d {}\r\nlocal id \u003d regexp:find(url, \"/(\\\\d+)-\")\r\nlocal doc \u003d http:request(\"https://www.wattpad.com/api/v3/stories/\" .. id):table()\r\nif doc ~\u003d nil then\r\n    local chapters \u003d doc[\"parts\"]\r\n    for _, value in ipairs(chapters) do\r\n        table.insert(list, core:new_chapter(value[\"title\"], regexp:find(value[\"url\"], \"/(\\\\d+)-\")))\r\n    end\r\nend\r\nreturn list","page":"local url \u003d ...\r\n\r\nlocal list \u003d {}\r\ntable.insert(list, url)\r\nreturn list","detail":"local url \u003d ...\r\n\r\nlocal id \u003d regexp:find(url, \"/(\\\\d+)-\", 1);\r\nlocal doc \u003d http:request(\"https://www.wattpad.com/api/v3/stories/\" .. id):table()\r\nif doc ~\u003d nil then\r\n    local book \u003d {}\r\n    local user \u003d doc[\"user\"]\r\n    book[\"name\"] \u003d doc[\"title\"]\r\n    book[\"cover\"] \u003d doc[\"cover\"]\r\n    if (user[\"fullname\"] ~\u003d nil) then\r\n        book[\"author\"] \u003d user[\"name\"] .. \" (\" .. user[\"fullname\"] .. \")\"\r\n    else\r\n        book[\"author\"] \u003d user[\"name\"]\r\n    end\r\n    book[\"description\"] \u003d doc[\"description\"]\r\n    return book\r\nend\r\nreturn nil","checked":true}